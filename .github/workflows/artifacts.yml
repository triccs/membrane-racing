name: Artifacts

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      # Force rustc to NOT emit bulk-memory
      - name: Ensure cargo config
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'CFG'
          [target.wasm32-unknown-unknown]
          rustflags = ["-C", "target-feature=-bulk-memory"]
          CFG
          cat .cargo/config.toml

      # Ensure lockfile exists for reproducible build
      - name: Generate/refresh lockfile
        run: cargo generate-lockfile

      - name: Build all contracts to wasm
        run: cargo build --release --target wasm32-unknown-unknown

      - name: Install binaryen (wasm-opt)
        run: sudo apt-get update && sudo apt-get install -y binaryen

      # Optimize artifacts and allow bulk-memory in validator just in case
      - name: Optimize wasm
        run: |
          mkdir -p artifacts
          # Find produced wasm files
          find target/wasm32-unknown-unknown/release -maxdepth 1 -type f -name '*.wasm' \
            -exec sh -c '
              for f do
                out="artifacts/$(basename "$f")"
                # Inspect for memory.copy/fill before/after, for debugging
                echo "Optimizing $f -> $out"
                strings "$f" | grep -E "memory\\.(copy|fill)" || true
                wasm-opt -Oz --enable-bulk-memory -o "$out" "$f"
                strings "$out" | grep -E "memory\\.(copy|fill)" || true
              done
            ' sh {} +
          ls -lh artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts/